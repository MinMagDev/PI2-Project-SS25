package LifeAndDeath;

/**
 * interface for the lifecycle of a particle
 */

public interface ReproducingParticle {

    /**
     * update values after childbirth
     */
    void updateValues();

    /**
     *
     * @return if the Paticle is still alive
     */
    boolean isAlive();

    /**
     *
     * @return if the particle should reproduce
     */
    boolean isReproducing();

    void setReproducing(boolean b);

    /**
     * Creates a mutated offspring of this particle.
     * <p>
     * A new DNA instance is generated by mutating the current one
     * with a predefined mutation probability ({@code EXPECTED_MUTATIONS}).
     * If the resulting DNA is somehow biologically empty (a rare but
     * concerning condition), no child is produced — nature's way of saying "no."
     *
     * <p>
     * If successful, the new child:
     * <ul>
     *     <li>Belongs to the same species</li>
     *     <li>Spawns at the exact same position (because inheritance is immediate and spatially lazy)</li>
     *     <li>Inherits the mutated DNA — whether it likes it or not</li>
     * </ul>
     *
     * <p>
     * This function represents a simplified reproduction mechanism
     * with absolutely no regard for mating, gestation, or ethics.
     * It is raw, asexual, procedural replication — the kind only a for-loop could love.
     *
     * <p> D.R.E.C.K.
     */
    default <T> T newChild(){
        return null;
    }


}
